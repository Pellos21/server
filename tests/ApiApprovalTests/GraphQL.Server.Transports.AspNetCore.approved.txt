namespace GraphQL.Server
{
    public static class GraphQLBuilderMiddlewareExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddHttpMiddleware<TSchema>(this GraphQL.DI.IGraphQLBuilder builder)
            where TSchema : GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddHttpMiddleware<TSchema, TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder)
            where TSchema : GraphQL.Types.ISchema
            where TMiddleware : GraphQL.Server.Transports.AspNetCore.GraphQLHttpMiddleware<TSchema> { }
    }
    public static class GraphQLBuilderUserContextExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddDefaultEndpointSelectorPolicy(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContextBuilder>(this GraphQL.DI.IGraphQLBuilder builder)
            where TUserContextBuilder :  class, GraphQL.Server.Transports.AspNetCore.IUserContextBuilder { }
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContext>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<TUserContext>> creator)
            where TUserContext :  class, System.Collections.Generic.IDictionary<string, object?> { }
        public static GraphQL.DI.IGraphQLBuilder AddUserContextBuilder<TUserContext>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<Microsoft.AspNetCore.Http.HttpContext, TUserContext> creator)
            where TUserContext :  class, System.Collections.Generic.IDictionary<string, object?> { }
    }
    public static class GraphQLBuilderWebSocketsExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddWebSockets(this GraphQL.DI.IGraphQLBuilder builder) { }
    }
}
namespace GraphQL.Server.Transports.AspNetCore
{
    public class GraphQLHttpMiddleware<TSchema> : Microsoft.AspNetCore.Http.IMiddleware
        where TSchema : GraphQL.Types.ISchema
    {
        public GraphQLHttpMiddleware(GraphQL.IGraphQLTextSerializer serializer) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object?>> BuildUserContextAsync(Microsoft.AspNetCore.Http.HttpContext context, System.Threading.CancellationToken cancellationToken) { }
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequestAsync(GraphQL.Transport.GraphQLRequest gqlRequest, System.Collections.Generic.IDictionary<string, object?> userContext, GraphQL.Server.IGraphQLExecuter<TSchema> executer, System.IServiceProvider requestServices, System.Threading.CancellationToken token) { }
        protected virtual System.Threading.CancellationToken GetCancellationToken(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.Task HandleContentTypeCouldNotBeParsedErrorAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.ValueTask<bool> HandleDeserializationErrorAsync(Microsoft.AspNetCore.Http.HttpContext context, System.Exception ex) { }
        protected virtual System.Threading.Tasks.Task HandleInvalidContentTypeErrorAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.Task HandleInvalidHttpMethodErrorAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.Task HandleNoQueryErrorAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        protected virtual System.Threading.Tasks.Task HandleRequestAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next, System.Collections.Generic.IDictionary<string, object?> userContext, GraphQL.Transport.GraphQLRequest[]? bodyGQLBatchRequest, GraphQL.Transport.GraphQLRequest? gqlRequest, GraphQL.Server.IGraphQLExecuter<TSchema> executer, System.Threading.CancellationToken cancellationToken) { }
        protected virtual System.Threading.Tasks.Task HandleWebSocketSubProtocolNotSupportedAsync(Microsoft.AspNetCore.Http.HttpContext context) { }
        public virtual System.Threading.Tasks.Task InvokeAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task InvokeWebsocketAsync(Microsoft.AspNetCore.Http.HttpContext context, Microsoft.AspNetCore.Http.RequestDelegate next) { }
        protected virtual System.Threading.Tasks.Task RequestExecutedAsync(in GraphQL.Server.Transports.AspNetCore.GraphQLRequestExecutionResult requestExecutionResult) { }
        protected virtual System.Threading.Tasks.Task RequestExecutingAsync(GraphQL.Transport.GraphQLRequest request, int? indexInBatch = default) { }
        protected virtual System.Threading.Tasks.Task WriteErrorResponseAsync(Microsoft.AspNetCore.Http.HttpContext context, string errorMessage, System.Net.HttpStatusCode httpStatusCode) { }
        protected virtual System.Threading.Tasks.Task WriteResponseAsync<TResult>(Microsoft.AspNetCore.Http.HttpResponse httpResponse, GraphQL.IGraphQLSerializer serializer, System.Threading.CancellationToken cancellationToken, TResult result) { }
    }
    public readonly struct GraphQLRequestExecutionResult
    {
        public GraphQLRequestExecutionResult(GraphQL.Transport.GraphQLRequest request, GraphQL.ExecutionResult result, System.TimeSpan elapsed, int? indexInBatch = default) { }
        public System.TimeSpan Elapsed { get; }
        public int? IndexInBatch { get; }
        public GraphQL.Transport.GraphQLRequest Request { get; }
        public GraphQL.ExecutionResult Result { get; }
    }
    public interface IUserContextBuilder
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object?>> BuildUserContext(Microsoft.AspNetCore.Http.HttpContext httpContext);
    }
    public interface IWebSocketHandler
    {
        System.Collections.Generic.IEnumerable<string> SupportedSubProtocols { get; }
        System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.WebSockets.WebSocket webSocket, string subProtocol, System.Collections.Generic.IDictionary<string, object?> userContext, System.Threading.CancellationToken cancellationToken);
    }
    public interface IWebSocketHandler<TSchema> : GraphQL.Server.Transports.AspNetCore.IWebSocketHandler
        where TSchema : GraphQL.Types.ISchema { }
    public static class MediaType
    {
        public const string FORM = "application/x-www-form-urlencoded";
        public const string GRAPH_QL = "application/graphql";
        public const string JSON = "application/json";
    }
    public class UserContextBuilder<TUserContext> : GraphQL.Server.Transports.AspNetCore.IUserContextBuilder
        where TUserContext : System.Collections.Generic.IDictionary<string, object>
    {
        public UserContextBuilder(System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<TUserContext>> func) { }
        public UserContextBuilder(System.Func<Microsoft.AspNetCore.Http.HttpContext, TUserContext> func) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> BuildUserContext(Microsoft.AspNetCore.Http.HttpContext httpContext) { }
    }
}
namespace GraphQL.Server.Transports.AspNetCore.WebSockets
{
    public interface IOperationMessageReceiveStream : System.IDisposable
    {
        System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message);
        void StartConnectionInitTimer();
    }
    public interface IOperationMessageSendStream
    {
        System.Threading.Tasks.Task CloseConnectionAsync();
        System.Threading.Tasks.Task CloseConnectionAsync(int eventId, string? description);
        System.Threading.Tasks.Task SendMessageAsync(GraphQL.Transport.OperationMessage message);
    }
    public class NewMessageType
    {
        public const string GQL_COMPLETE = "complete";
        public const string GQL_CONNECTION_ACK = "connection_ack";
        public const string GQL_CONNECTION_INIT = "connection_init";
        public const string GQL_ERROR = "error";
        public const string GQL_NEXT = "next";
        public const string GQL_PING = "ping";
        public const string GQL_PONG = "pong";
        public const string GQL_SUBSCRIBE = "subscribe";
        public NewMessageType() { }
    }
    public class NewSubscriptionServer : GraphQL.Server.Transports.AspNetCore.WebSockets.OperationMessageServer
    {
        public NewSubscriptionServer(GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageSendStream sendStream, System.TimeSpan connectionInitWaitTimeout, System.TimeSpan keepAliveTimeout, GraphQL.Server.IGraphQLExecuter executer, GraphQL.IGraphQLSerializer serializer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected GraphQL.Server.IGraphQLExecuter GraphQLExecuter { get; }
        protected GraphQL.IGraphQLSerializer Serializer { get; }
        protected Microsoft.Extensions.DependencyInjection.IServiceScopeFactory ServiceScopeFactory { get; }
        protected System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequest(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnComplete(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnConnectionAcknowledge(GraphQL.Transport.OperationMessage message) { }
        public override System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnPing(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnSendKeepAlive() { }
        protected virtual System.Threading.Tasks.Task OnSubscribe(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task SendCompleted(string id) { }
        protected override System.Threading.Tasks.Task SendData(string id, GraphQL.ExecutionResult result) { }
        protected override System.Threading.Tasks.Task SendErrorResult(string id, GraphQL.ExecutionResult result) { }
    }
    public class OldMessageType
    {
        public const string GQL_COMPLETE = "complete";
        public const string GQL_CONNECTION_ACK = "connection_ack";
        public const string GQL_CONNECTION_ERROR = "connection_error";
        public const string GQL_CONNECTION_INIT = "connection_init";
        public const string GQL_CONNECTION_KEEP_ALIVE = "ka";
        public const string GQL_CONNECTION_TERMINATE = "connection_terminate";
        public const string GQL_DATA = "data";
        public const string GQL_ERROR = "error";
        public const string GQL_START = "start";
        public const string GQL_STOP = "stop";
        public OldMessageType() { }
    }
    public class OldSubscriptionServer : GraphQL.Server.Transports.AspNetCore.WebSockets.OperationMessageServer
    {
        public OldSubscriptionServer(GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageSendStream sendStream, System.TimeSpan connectionInitWaitTimeout, System.TimeSpan keepAliveTimeout, GraphQL.Server.IGraphQLExecuter executer, GraphQL.IGraphQLSerializer serializer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, System.Collections.Generic.IDictionary<string, object?> userContext) { }
        protected GraphQL.Server.IGraphQLExecuter GraphQLExecuter { get; }
        protected GraphQL.IGraphQLSerializer Serializer { get; }
        protected Microsoft.Extensions.DependencyInjection.IServiceScopeFactory ServiceScopeFactory { get; }
        protected System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        protected override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequest(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnConnectionAcknowledge(GraphQL.Transport.OperationMessage message) { }
        public override System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task OnSendKeepAlive() { }
        protected virtual System.Threading.Tasks.Task OnStart(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnStop(GraphQL.Transport.OperationMessage message) { }
        protected override System.Threading.Tasks.Task SendCompleted(string id) { }
        protected override System.Threading.Tasks.Task SendData(string id, GraphQL.ExecutionResult result) { }
        protected override System.Threading.Tasks.Task SendErrorResult(string id, GraphQL.ExecutionResult result) { }
    }
    public abstract class OperationMessageServer : GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageReceiveStream, System.IDisposable
    {
        public OperationMessageServer(GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageSendStream sendStream, System.TimeSpan connectionInitWaitTimeout, System.TimeSpan keepAliveTimeout) { }
        protected System.Threading.CancellationToken CancellationToken { get; }
        protected GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageSendStream Client { get; }
        protected bool Initialized { get; }
        protected GraphQL.Server.Transports.AspNetCore.WebSockets.SubscriptionList Subscriptions { get; }
        public virtual void Dispose() { }
        protected virtual System.Threading.Tasks.Task ErrorConnectionInitializationTimeout() { }
        protected virtual System.Threading.Tasks.Task ErrorIdAlreadyExists(string id) { }
        protected virtual System.Threading.Tasks.Task ErrorIdCannotBeBlank() { }
        protected virtual System.Threading.Tasks.Task ErrorNotInitialized() { }
        protected virtual System.Threading.Tasks.Task ErrorTooManyInitializationRequests() { }
        protected virtual System.Threading.Tasks.Task ErrorUnrecognizedMessage() { }
        protected abstract System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteRequest(GraphQL.Transport.OperationMessage message);
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> HandleError(System.Exception ex) { }
        protected virtual System.Threading.Tasks.Task OnCloseConnection() { }
        protected abstract System.Threading.Tasks.Task OnConnectionAcknowledge(GraphQL.Transport.OperationMessage message);
        protected virtual System.Threading.Tasks.Task OnConnectionInit(GraphQL.Transport.OperationMessage message) { }
        protected virtual System.Threading.Tasks.Task OnConnectionInitWaitTimeout() { }
        public abstract System.Threading.Tasks.Task OnMessageReceivedAsync(GraphQL.Transport.OperationMessage message);
        protected abstract System.Threading.Tasks.Task OnSendKeepAlive();
        protected abstract System.Threading.Tasks.Task SendCompleted(string id);
        protected abstract System.Threading.Tasks.Task SendData(string id, GraphQL.ExecutionResult result);
        protected virtual System.Threading.Tasks.Task SendErrorResult(string id, GraphQL.ExecutionError error) { }
        protected abstract System.Threading.Tasks.Task SendErrorResult(string id, GraphQL.ExecutionResult result);
        protected virtual System.Threading.Tasks.Task SendSingleResult(string id, GraphQL.ExecutionResult result) { }
        public void StartConnectionInitTimer() { }
        protected virtual System.Threading.Tasks.Task Subscribe(GraphQL.Transport.OperationMessage message, bool overwrite) { }
        protected bool TryInitialize() { }
        protected virtual System.Threading.Tasks.Task Unsubscribe(string id) { }
    }
    public sealed class SubscriptionList : System.IDisposable
    {
        public SubscriptionList(System.Threading.CancellationToken cancellationToken) { }
        public System.IDisposable this[string id] { set; }
        public bool CompareExchange(string id, System.IDisposable oldSubscription, System.IDisposable newSubscription) { }
        public bool Contains(string id) { }
        public bool Contains(string id, System.IDisposable subscription) { }
        public void Dispose() { }
        public bool TryAdd(string id, System.IDisposable subscription) { }
        public bool TryRemove(string id) { }
        public bool TryRemove(string id, System.IDisposable oldSubscription) { }
    }
    public class WebSocketConnection : GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageSendStream
    {
        public WebSocketConnection(System.Net.WebSockets.WebSocket webSocket, GraphQL.IGraphQLSerializer serializer, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task CloseConnectionAsync() { }
        public System.Threading.Tasks.Task CloseConnectionAsync(int closeStatusId, string? closeDescription) { }
        public virtual System.Threading.Tasks.Task ExecuteAsync(GraphQL.Server.Transports.AspNetCore.WebSockets.IOperationMessageReceiveStream operationMessageReceiveStream) { }
        public System.Threading.Tasks.Task SendMessageAsync(GraphQL.Transport.OperationMessage message) { }
    }
    public class WebSocketHandler : GraphQL.Server.Transports.AspNetCore.IWebSocketHandler
    {
        public WebSocketHandler(GraphQL.IGraphQLSerializer serializer, GraphQL.Server.IGraphQLExecuter executer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.Server.Transports.AspNetCore.WebSockets.WebSocketHandlerOptions webSocketHandlerOptions) { }
        public System.Collections.Generic.IEnumerable<string> SupportedSubProtocols { get; }
        public System.Threading.Tasks.Task ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.WebSockets.WebSocket webSocket, string subProtocol, System.Collections.Generic.IDictionary<string, object?> userContext, System.Threading.CancellationToken cancellationToken) { }
    }
    public class WebSocketHandlerOptions
    {
        public WebSocketHandlerOptions() { }
        public System.TimeSpan ConnectionInitWaitTimeout { get; set; }
        public System.TimeSpan KeepAliveTimeout { get; set; }
    }
    public class WebSocketHandler<TSchema> : GraphQL.Server.Transports.AspNetCore.WebSockets.WebSocketHandler, GraphQL.Server.Transports.AspNetCore.IWebSocketHandler, GraphQL.Server.Transports.AspNetCore.IWebSocketHandler<TSchema>
        where TSchema : GraphQL.Types.ISchema
    {
        public WebSocketHandler(GraphQL.IGraphQLSerializer serializer, GraphQL.Server.IGraphQLExecuter<TSchema> executer, Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.Server.Transports.AspNetCore.WebSockets.WebSocketHandlerOptions options) { }
    }
    public class WebsocketWriterStream : System.IO.Stream
    {
        public WebsocketWriterStream(System.Net.WebSockets.WebSocket webSocket) { }
        public override bool CanRead { get; }
        public override bool CanSeek { get; }
        public override bool CanWrite { get; }
        public override long Length { get; }
        public override long Position { get; set; }
        public override void Flush() { }
        public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) { }
        public override int Read(byte[] buffer, int offset, int count) { }
        public override long Seek(long offset, System.IO.SeekOrigin origin) { }
        public override void SetLength(long value) { }
        public override void Write(byte[] buffer, int offset, int count) { }
        public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default) { }
        public override System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Microsoft.AspNetCore.Builder
{
    public static class GraphQLHttpApplicationBuilderExtensions
    {
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Http.PathString path)
            where TSchema : GraphQL.Types.ISchema { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, string path = "/graphql")
            where TSchema : GraphQL.Types.ISchema { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema, TMiddleware>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, Microsoft.AspNetCore.Http.PathString path)
            where TSchema : GraphQL.Types.ISchema
            where TMiddleware : GraphQL.Server.Transports.AspNetCore.GraphQLHttpMiddleware<TSchema> { }
        public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseGraphQL<TSchema, TMiddleware>(this Microsoft.AspNetCore.Builder.IApplicationBuilder builder, string path = "/graphql")
            where TSchema : GraphQL.Types.ISchema
            where TMiddleware : GraphQL.Server.Transports.AspNetCore.GraphQLHttpMiddleware<TSchema> { }
    }
    public class GraphQLHttpEndpointConventionBuilder : Microsoft.AspNetCore.Builder.IEndpointConventionBuilder
    {
        public void Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder> convention) { }
    }
    public static class GraphQLHttpEndpointRouteBuilderExtensions
    {
        public static Microsoft.AspNetCore.Builder.GraphQLHttpEndpointConventionBuilder MapGraphQL<TSchema>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern = "graphql")
            where TSchema : GraphQL.Types.ISchema { }
        public static Microsoft.AspNetCore.Builder.GraphQLHttpEndpointConventionBuilder MapGraphQL<TSchema, TMiddleware>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints, string pattern = "graphql")
            where TSchema : GraphQL.Types.ISchema
            where TMiddleware : GraphQL.Server.Transports.AspNetCore.GraphQLHttpMiddleware<TSchema> { }
    }
}